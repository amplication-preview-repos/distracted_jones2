/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PreprocessFunctionService } from "../preprocessFunction.service";
import { PreprocessFunctionCreateInput } from "./PreprocessFunctionCreateInput";
import { PreprocessFunction } from "./PreprocessFunction";
import { PreprocessFunctionFindManyArgs } from "./PreprocessFunctionFindManyArgs";
import { PreprocessFunctionWhereUniqueInput } from "./PreprocessFunctionWhereUniqueInput";
import { PreprocessFunctionUpdateInput } from "./PreprocessFunctionUpdateInput";

export class PreprocessFunctionControllerBase {
  constructor(protected readonly service: PreprocessFunctionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PreprocessFunction })
  async createPreprocessFunction(
    @common.Body() data: PreprocessFunctionCreateInput
  ): Promise<PreprocessFunction> {
    return await this.service.createPreprocessFunction({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PreprocessFunction] })
  @ApiNestedQuery(PreprocessFunctionFindManyArgs)
  async preprocessFunctions(
    @common.Req() request: Request
  ): Promise<PreprocessFunction[]> {
    const args = plainToClass(PreprocessFunctionFindManyArgs, request.query);
    return this.service.preprocessFunctions({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PreprocessFunction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async preprocessFunction(
    @common.Param() params: PreprocessFunctionWhereUniqueInput
  ): Promise<PreprocessFunction | null> {
    const result = await this.service.preprocessFunction({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PreprocessFunction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePreprocessFunction(
    @common.Param() params: PreprocessFunctionWhereUniqueInput,
    @common.Body() data: PreprocessFunctionUpdateInput
  ): Promise<PreprocessFunction | null> {
    try {
      return await this.service.updatePreprocessFunction({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PreprocessFunction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePreprocessFunction(
    @common.Param() params: PreprocessFunctionWhereUniqueInput
  ): Promise<PreprocessFunction | null> {
    try {
      return await this.service.deletePreprocessFunction({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
